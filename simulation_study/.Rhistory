length = sim.sets.n)
for (i in 1:sim.sets.n) {
set.seed(182)
full_simdata <- data.frame(
x = dat$x,
y = dat$y,
resp = simdata[i,]
)
calculate_rfsp_predictions(training_data = tmp$train,
test_points = tmp$test) -> rfsp_model
rfsp_predictions[[i]] <- rfsp_model$predictions
}
end <- Sys.time()
end - start
start <- Sys.time()
train.n <- 300
sim.sets.n <- 10
rfsp_predictions <- vector(mode = "list",
length = sim.sets.n)
for (i in 1:sim.sets.n) {
set.seed(182)
full_simdata <- data.frame(
x = dat$x,
y = dat$y,
resp = simdata[i,]
)
calculate_rfsp_predictions_rasterpd(training_data = tmp$train, test_points = tmp$test) -> rfsp_model
rfsp_predictions[[i]] <- rfsp_model$predictions
}
end <- Sys.time()
end - start
start <- Sys.time()
train.n <- 300
sim.sets.n <- 10
rfsp_predictions <- vector(mode = "list",
length = sim.sets.n)
obs_responses <- vector(mode = "list",
length = sim.sets.n)
for (i in 1:sim.sets.n) {
set.seed(182)
full_simdata <- data.frame(
x = dat$x,
y = dat$y,
resp = simdata[i,]
)
calculate_rfsp_predictions_rasterpd(training_data = tmp$train, test_points = tmp$test) -> rfsp_model
rfsp_predictions[[i]] <- rfsp_model$predictions
obs_responses[[i]] <- tmp$test$resp
}
end <- Sys.time()
end - start
rmspe(unlist(rfsp_predictions), unlist(obs_responses))
start <- Sys.time()
train.n <- 300
sim.sets.n <- 10
rfsp_predictions_raster <- vector(mode = "list",
length = sim.sets.n)
rfsp_predictions_nonraster <- vector(mode = "list",
length = sim.sets.n)
obs_responses <- vector(mode = "list",
length = sim.sets.n)
for (i in 1:sim.sets.n) {
set.seed(182)
full_simdata <- data.frame(
x = dat$x,
y = dat$y,
resp = simdata[i,]
)
calculate_rfsp_predictions_rasterpd(training_data = tmp$train, test_points = tmp$test) -> rfsp_model_raster
calculate_rfsp_predictions(training_data = tmp$train, test_points = tmp$test) -> rfsp_model_nonraster
rfsp_predictions_raster[[i]] <- rfsp_model_raster$predictions
rfsp_predictions_nonraster[[i]] <- rfsp_model_nonraster$predictions
obs_responses[[i]] <- tmp$test$resp
}
end <- Sys.time()
end - start
rmspe(unlist(rfsp_predictions_raster), unlist(obs_responses))
rmspe(unlist(rfsp_predictions_nonraster), unlist(obs_responses))
simdata[1,]
simdata[2,]
simdata[3,]
hist(simdata[3,])
source('~/MS_Project/simulation_study/simulated_data_comparison.R', echo=TRUE)
source('~/MS_Project/simulation_study/simulated_data_comparison.R', echo=TRUE)
source('~/MS_Project/simulation_study/simulated_data_comparison.R', echo=TRUE)
source('~/MS_Project/simulation_study/simulated_data_comparison.R', echo=TRUE)
warnings()
# Let's do some residual plots
plot(x = sim.final.df$obs,
y = (sim.final.df$gauscop - sim.final.df$obs),
main = "Residual plot of Gaussian Copula",
xlab = "Observed Values",
ylab = "Residuals")
plot(x = sim.final.df$obs,
y = (sim.final.df$ok - sim.final.df$obs),
main = "Residual plot of Ordinary Kriging",
xlab = "Observed Values",
ylab = "Residuals")
par(mfrow=c(1,3))
plot(x = sim.final.df$obs,
y = (sim.final.df$gauscop - sim.final.df$obs),
main = "Residual plot of Gaussian Copula",
xlab = "Observed Values",
ylab = "Residuals")
plot(x = sim.final.df$obs,
y = (sim.final.df$ok - sim.final.df$obs),
main = "Residual plot of Ordinary Kriging",
xlab = "Observed Values",
ylab = "Residuals")
plot(x = sim.final.df$obs,
y = (sim.final.df$rfsp - sim.final.df$obs),
main = "Residual plot of Random Forest",
xlab = "Observed Values",
ylab = "Residuals")
par(mfrow=c(1,1))
# RMSPE of the three methods
rmspe(sim.final.df$gauscop, sim.final.df$obs)
rmspe(sim.final.df$rfsp, sim.final.df$obs)
rmspe(sim.final.df$ok, sim.final.df$obs)
hist(gauscop_times)
hist(ok_times)
hist(rfsp_times)
summary(gauscop_times)
summary(ok_times)
summary(rfsp_times)
source('~/MS_Project/simulation_study/simulated_data_comparison.R', echo=TRUE)
par(mfrow=c(2,2))
hist(sim.final.df$gauscop_krige,
main = "Gaussian Copula (kriging) predictions",
breaks = seq(0, 3000, 100))
hist(sim.final.df$gauscop_alg,
main = "Gaussian Copula (matrix algebra) predictions",
breaks = seq(0, 3000, 100))
hist(sim.final.df$ok,
main = "Ordinary Kriging predictions",
breaks = seq(min(sim.final.df$ok), 3000, 100))
hist(sim.final.df$rfsp,
main = "Random forest predictions",
breaks = seq(0, 3000, 100))
par(mfrow=c(2,2))
hist(sim.final.df$gauscop_krige,
main = "Gaussian Copula (kriging) predictions",
breaks = seq(0, 3000, 100))
hist(sim.final.df$gauscop_alg,
main = "Gaussian Copula (matrix algebra) predictions",
breaks = seq(0, max(sim.final.df$gauscop_alg), 100))
hist(sim.final.df$ok,
main = "Ordinary Kriging predictions",
breaks = seq(min(sim.final.df$ok), 3000, 100))
hist(sim.final.df$rfsp,
main = "Random forest predictions",
breaks = seq(0, 3000, 100))
par(mfrow=c(2,2))
hist(sim.final.df$gauscop_krige,
main = "Gaussian Copula (kriging) predictions",
breaks = seq(0, 3000, 100))
hist(sim.final.df$gauscop_alg,
main = "Gaussian Copula (matrix algebra) predictions",
breaks = seq(min(sim.final.df$gauscop_alg), max(sim.final.df$gauscop_alg), 100))
hist(sim.final.df$ok,
main = "Ordinary Kriging predictions",
breaks = seq(min(sim.final.df$ok), 3000, 100))
hist(sim.final.df$rfsp,
main = "Random forest predictions",
breaks = seq(0, 3000, 100))
seq(min(sim.final.df$gauscop_alg), max(sim.final.df$gauscop_alg), 100)
min(sim.final.df$gauscop_alg); max(sim.final.df$gauscop_alg)
par(mfrow=c(2,2))
hist(sim.final.df$gauscop_krige,
main = "Gaussian Copula (kriging) predictions",
breaks = seq(0, 3000, 100))
hist(sim.final.df$gauscop_alg,
main = "Gaussian Copula (matrix algebra) predictions",
breaks = seq(min(sim.final.df$gauscop_alg), max(sim.final.df$gauscop_alg)+100, 100))
hist(sim.final.df$ok,
main = "Ordinary Kriging predictions",
breaks = seq(min(sim.final.df$ok), 3000, 100))
hist(sim.final.df$rfsp,
main = "Random forest predictions",
breaks = seq(0, 3000, 100))
hist(sim.final.df$gauscop_alg,
main = "Gaussian Copula (matrix algebra) predictions",
breaks = seq(0, 3000, 100))
hist(sim.final.df$gauscop_alg[sim.final.df$gauscop_alg <= 3000,],
main = "Gaussian Copula (matrix algebra) predictions",
breaks = seq(0, 3000, 100))
hist(sim.final.df$gauscop_alg[sim.final.df$gauscop_alg <= 3000],
main = "Gaussian Copula (matrix algebra) predictions",
breaks = seq(0, 3000, 100))
par(mfrow=c(2,2))
hist(sim.final.df$gauscop_krige,
main = "Gaussian Copula (kriging) predictions",
breaks = seq(0, 3000, 100))
hist(sim.final.df$gauscop_alg[sim.final.df$gauscop_alg <= 3000],
main = "Gaussian Copula (matrix algebra) predictions",
breaks = seq(0, 3000, 100))
hist(sim.final.df$ok,
main = "Ordinary Kriging predictions",
breaks = seq(min(sim.final.df$ok), 3000, 100))
hist(sim.final.df$rfsp,
main = "Random forest predictions",
breaks = seq(0, 3000, 100))
par(mfrow=c(2,2))
hist(sim.final.df$gauscop_krige,
main = "Gaussian Copula (kriging) predictions",
breaks = seq(0, 3000, 100),
axes = FALSE)
hist(sim.final.df$gauscop_alg[sim.final.df$gauscop_alg <= 3000],
main = "Gaussian Copula (matrix algebra) predictions",
breaks = seq(0, 3000, 100),
axes = FALSE)
hist(sim.final.df$ok,
main = "Ordinary Kriging predictions",
breaks = seq(min(sim.final.df$ok), 3000, 100),
axes = FALSE)
hist(sim.final.df$rfsp,
main = "Random forest predictions",
breaks = seq(0, 3000, 100),
axes = FALSE)
par(mfrow=c(2,2))
hist(sim.final.df$gauscop_krige,
main = "Gaussian Copula (kriging) predictions",
breaks = seq(0, 3000, 100),
xaxt = 'n')
hist(sim.final.df$gauscop_alg[sim.final.df$gauscop_alg <= 3000],
main = "Gaussian Copula (matrix algebra) predictions",
breaks = seq(0, 3000, 100),
axes = FALSE)
hist(sim.final.df$ok,
main = "Ordinary Kriging predictions",
breaks = seq(min(sim.final.df$ok), 3000, 100),
xaxt = 'n')
hist(sim.final.df$rfsp,
main = "Random forest predictions",
breaks = seq(0, 3000, 100),
xaxt = 'n')
hist(sim.final.df$gauscop_krige,
main = "Gaussian Copula (kriging) predictions",
breaks = seq(0, 3000, 100),
xaxt = 'n',
ann = FALSE)
par(mfrow=c(2,2))
hist(sim.final.df$gauscop_krige,
main = "Gaussian Copula (kriging) predictions",
breaks = seq(0, 3000, 100),
xaxt = 'n')
hist(sim.final.df$gauscop_alg[sim.final.df$gauscop_alg <= 3000],
main = "Gaussian Copula (matrix algebra) predictions",
breaks = seq(0, 3000, 100),
xaxt = 'n')
hist(sim.final.df$ok,
main = "Ordinary Kriging predictions",
breaks = seq(min(sim.final.df$ok), 3000, 100),
xaxt = 'n')
hist(sim.final.df$rfsp,
main = "Random forest predictions",
breaks = seq(0, 3000, 100),
xaxt = 'n')
i <- 1
paste0("hello", i)
# Estimate the spatial parameters. Create Nresp_df, a data frame of smoothed response
# transformed to standard normal via the Gaussian copula double-transformation.
# Fit a variogram to that. Without covariates, the Gaussian copula model fits,
# but the exponential and spherical don't.
Nresp_df <- data.frame(x=dat$x,y=dat$y,
z=qnorm(pzig(resp,mu,beta,epsilon,Pi)))
# Actual forest inventory data but with fuzzed locations.
dat <- read.csv("ForestDataFuzzed.csv")
setwd("~/MS_Project")
# Actual forest inventory data but with fuzzed locations.
dat <- read.csv("ForestDataFuzzed.csv")
# Perform Alber's equal area map projection.
# Resulting xy coordinates are in meters.
alb.xy <- project(with(dat,cbind(lon_fuzzed,lat_fuzzed)),
"+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs")
colnames(alb.xy) <- c("x","y")
dat <- cbind(alb.xy,dat)
# Plot total volume, a potential response variable of interest.
library(ggplot2)
ggplot(dat, aes(x=x/1000,y=y/1000,color=totvol)) +
geom_point(size=2) +
scale_color_gradient(low = "white", high = "red") +
scale_x_continuous(breaks = round(seq(-2150, -2000, by = 50),2)) +
theme(axis.text.x=element_text(angle=90,hjust=1))
zeros <- which(dat$totvol==0) # Which observations are 0?
(epsilon <- min(dat$totvol[-zeros])) # Smallest non-0
Pi <- length(zeros)/length(dat$totvol) # Proportion of 0's
# Anticipating modeling Pi as a function of parameters, so each obs. will have its own Pi.
Pi <- rep(Pi, times=length(dat$totvol))
# Estimate the gamma parameters via Method of Moments on the non-0 data.
mu <- mean(dat$totvol[-zeros])
beta <- var(dat$totvol[-zeros])/mu
# Each obs. may have its own mu also, but beta remains scalar.
mu <- rep(mu, times=length(dat$totvol))
resp <- dat$totvol
resp[zeros] <- runif(length(zeros),0,epsilon)
# Create distance matrix
H <- as.matrix(dist(alb.xy))
source("ZIGFunctions.R") # Functions for zero-inflated gamma.
# Estimate the spatial parameters. Create Nresp_df, a data frame of smoothed response
# transformed to standard normal via the Gaussian copula double-transformation.
# Fit a variogram to that. Without covariates, the Gaussian copula model fits,
# but the exponential and spherical don't.
Nresp_df <- data.frame(x=dat$x,y=dat$y,
z=qnorm(pzig(resp,mu,beta,epsilon,Pi)))
require(gstat)
emp_var<-variogram(z~1,loc=~x+y,Nresp_df)
plot(emp_var)
v_fit<-fit.variogram(emp_var,vgm(psill=.6,"Gau",range=80000,nugget=.6))
plot(emp_var,v_fit)
# Estimate the spatial parameters. Create Nresp_df, a data frame of smoothed response
# transformed to standard normal via the Gaussian copula double-transformation.
# Fit a variogram to that. Without covariates, the Gaussian copula model fits,
# but the exponential and spherical don't.
Nresp_df <- data.frame(x=dat$x,y=dat$y,
z=dat$totvol)
emp_var<-variogram(z~1,loc=~x+y,Nresp_df)
plot(emp_var)
v_fit<-fit.variogram(emp_var,vgm(psill=.6,"Gau",range=80000,nugget=.6))
# Estimate the spatial parameters. Create Nresp_df, a data frame of smoothed response
# transformed to standard normal via the Gaussian copula double-transformation.
# Fit a variogram to that. Without covariates, the Gaussian copula model fits,
# but the exponential and spherical don't.
Nresp_df <- data.frame(x=dat$x,y=dat$y,
z=qnorm(pzig(resp,mu,beta,epsilon,Pi)))
emp_var<-variogram(z~1,loc=~x+y,Nresp_df)
plot(emp_var)
v_fit<-fit.variogram(emp_var,vgm(psill=.6,"Gau",range=80000,nugget=.6))
plot(emp_var,v_fit,
main = "")
plot(emp_var,v_fit,
main = "Semivariogram of Standard Normal Data",
sub = "Fitted with Gaussian Variogram")
plot(emp_var,v_fit)
title(
main = "Semivariogram of Standard Normal Data",
sub = "Fitted with Gaussian Variogram"
)
plot(emp_var,v_fit)
title(
main = "Semivariogram of Standard Normal Data",
sub = "Fitted with Gaussian Variogram"
)
plot(emp_var,v_fit)
v_fit<-fit.variogram(emp_var,vgm(psill=.6,"Gau",range=80000,nugget=.6))
plot(emp_var,v_fit)
title(
main = "Semivariogram of Standard Normal Data",
sub = "Fitted with Gaussian Variogram"
)
plot(emp_var,v_fit,
main = "Semivariogram of Standard Normal Data")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gridExtra)
library(zoo)
employed_file <- "PAYNSA.txt"
url <- "https://fred.stlouisfed.org/data/"
if(!file.exists(employed_file)){
download.file(paste0(url, employed_file), employed_file,
mode = "wb")
}
employed <- read_table2(employed_file,
col_names = c("date", "employed"), skip = 39)
pop_file <- "LFWA64TTUSM647N.txt"
if(!file.exists(pop_file)){
download.file(paste0(url, pop_file), pop_file,
mode= "wb")
}
pop <- read_table2(pop_file,
col_names = c("date", "pop"), skip = 39)
pop_emp <- full_join(pop, employed)
employed_file <- "PAYNSA.txt"
url <- "https://fred.stlouisfed.org/data/"
if(!file.exists(employed_file)){
download.file(paste0(url, employed_file), employed_file,
mode = "wb")
}
employed <- read_table2(employed_file,
col_names = c("date", "employed"), skip = 39)
pop_file <- "LFWA64TTUSM647N.txt"
if(!file.exists(pop_file)){
download.file(paste0(url, pop_file), pop_file,
mode= "wb")
}
pop <- read_table2(pop_file,
col_names = c("date", "pop"), skip = 39)
pop_emp <- full_join(pop, employed)
plot(stl(x = ts(pop_emp_recent$percent_emp, freq = 12),
s.window = "periodic", na.action = na.omit))
plot(emp_var,v_fit)
colnames(sim_data)
plot(emp_var)
colnames(dat)
# Estimate the spatial parameters. Create Nresp_df, a data frame of smoothed response
# transformed to standard normal via the Gaussian copula double-transformation.
# Fit a variogram to that. Without covariates, the Gaussian copula model fits,
# but the exponential and spherical don't.
Nresp_df <- data.frame(x=dat$x,y=dat$y,
annpre = dat$annpre
z=qnorm(pzig(resp,mu,beta,epsilon,Pi)))
# Estimate the spatial parameters. Create Nresp_df, a data frame of smoothed response
# transformed to standard normal via the Gaussian copula double-transformation.
# Fit a variogram to that. Without covariates, the Gaussian copula model fits,
# but the exponential and spherical don't.
Nresp_df <- data.frame(x=dat$x,y=dat$y,
annpre = dat$annpre,
z=qnorm(pzig(resp,mu,beta,epsilon,Pi)))
emp_var<-variogram(z~annpre,loc=~x+y,Nresp_df)
plot(emp_var)
plot(emp_var,
main = "Variogram with annual precipitation factored in")
v_fit<-fit.variogram(emp_var,vgm(psill=.6,"Gau",range=80000,nugget=.6))
plot(emp_var,v_fit,
main = "Semivariogram of Standard Normal Data")
plot(emp_var,v_fit,
main = "Variogram with annual precipitation factored in")
plot(emp_var,v_fit,
main = "Variogram with annual precipitation effect factored in")
source('~/MS_Project/simulation_study/simulated_data_comparison.R', echo=TRUE)
source('~/MS_Project/simulation_study/simulated_data_comparison.R', echo=TRUE)
source('~/MS_Project/simulation_study/simulated_data_comparison.R', echo=TRUE)
source('~/MS_Project/simulation_study/simulated_data_comparison.R', echo=TRUE)
rmspe(sim.final.df$rfsp150, sim.final.df$obs)
rmspe(sim.final.df$rfsp100, sim.final.df$obs)
rmspe(sim.final.df$rfsp50, sim.final.df$obs)
rmspe(sim.final.df$ok, sim.final.df$obs)
# RMSPE of the three methods
rmspe(sim.final.df$gauscop_krige, sim.final.df$obs)
rmspe(sim.final.df$gauscop_alg, sim.final.df$obs)
rmspe(sim.final.df$rfsp_tr0, sim.final.df$obs)
rmspe(sim.final.df$ok_tr0, sim.final.df$obs)
hist(sim.final.df$rfsp_tr0)
summary(rfsp_times150)
summary(rfsp_times100)
summary(rfsp_times50)
summary(ok_times)
summary(gauscop_times)
summary(rfsp_times150)
summary(sim.final.df$rfsp_tr0)
transformed.training.set$epsilon
transformed.training.set$epsilon^3
hist(rfsp_model$predictions)
rfsp_model
source('~/MS_Project/simulation_study/simulated_data_comparison.R', echo=TRUE)
small_preds_to_zeros(sim.final.df$rfsp150, transformed.training.set$epsilon)
hist(sim.final.df$rfsp150)
hist(small_preds_to_zeros(sim.final.df$rfsp150, transformed.training.set$epsilon))
small_preds_to_zeros <- function(preds, epsilon, backtransform=TRUE) {
#' Function to transform small predicted values (below a given epsilon) to 0
#'
#' @param preds vector of predicted values
#' @param epsilon smallest nonzero value in original data
#'
#' @return vector of new predicted values
if (backtransform) {
epsilon <- epsilon^3
preds[preds < epsilon] <- 0
} else {
preds[preds < epsilon] <- 0
}
return(preds)
}
small_preds_to_zeros(sim.final.df$rfsp150, transformed.training.set$epsilon)
hist(small_preds_to_zeros(sim.final.df$rfsp150, transformed.training.set$epsilon))
source('~/MS_Project/simulation_study/simulated_data_comparison.R', echo=TRUE)
sum(sim.final.df$rfsp_tr0 == 0) / nrow(sim.final.df)
source('~/MS_Project/simulation_study/simulated_data_comparison.R', echo=TRUE)
summary(gauscop_times)
summary(ok_times)
summary(rfsp_times150)
summary(rfsp_times100)
summary(rfsp_times50)
source('~/MS_Project/simulation_study/simulated_data_comparison.R', echo=TRUE)
nrow(tmp$train)
source('~/MS_Project/simulation_study/simulated_data_comparison.R', echo=TRUE)
z
tmp$train
nrow(tmp$train)
hist(transformed.training.set$transformed_data$resp)
theta$mu
theta
str(transformed.training.set$transformed_data)
transformed.training.set$zeros
len(transformed.training.set$zeros)
length(transformed.training.set$zeros)
source('~/MS_Project/simulation_study/simulated_data_comparison.R', echo=TRUE)
source('~/MS_Project/simulation_study/simulated_data_comparison.R', echo=TRUE)
warnings()
theta
transformed.training.set$Pi
z <- qnorm(pzig(y = transformed.training.set$transformed_data$resp,
mu = theta$mu,
beta = theta$beta,
epsilon = transformed.training.set$epsilon,
Pi = transformed.training.set$Pi))
z
source('~/MS_Project/simulation_study/simulated_data_comparison.R', echo=TRUE)
source('~/MS_Project/simulation_study/simulated_data_comparison.R', echo=TRUE)
summary(gauscop_times)
summary(ok_times)
summary(rfsp_times150)
summary(rfsp_times100)
summary(rfsp_times50)
transformed.training.set$Pi
transformed.training.set$epsilon
200*.175
source('~/MS_Project/resampling_study/copula_func.R')
tmp$train$resp == 0
ifelse(tmp$train$resp == 0, 1, 0)
zeros <- ifelse(tmp$train$resp == 0, 1, 0)
sum(zeros)
